{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["images","shaders","Shaders","create","Operations","frag","GLSL","getWindowDimensions","window","innerWidth","App","useState","img","bnw","negative","binary","binaryValue","brightness","state","setState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","Grid","container","justifyContent","alignItems","spacing","item","width","Math","min","height","shader","uniforms","xs","sm","md","lg","xl","FormGroup","FormControl","variant","InputLabel","id","Select","labelId","value","onChange","e","target","label","map","v","idx","MenuItem","src","alt","FormControlLabel","control","Checkbox","checked","inputProps","Slider","disabled","color","valueLabelDisplay","step","max","newValue","Typography","gutterBottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40ff5d15.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GLSL, Shaders, Node } from \"gl-react\";\nimport { Surface } from \"gl-react-dom\";\nimport {\n  Typography,\n  FormGroup,\n  FormControl,\n  FormControlLabel,\n  Grid,\n  Checkbox,\n  Slider,\n  InputLabel,\n  Select,\n  MenuItem\n} from \"@material-ui/core\";\n\nconst images = [\n  './sample/Chrysanthemum.jpg',\n  './sample/Desert.jpg',\n  './sample/Hydrangeas.jpg',\n  './sample/Jellyfish.jpg',\n  './sample/Koala.jpg',\n  './sample/Lighthouse.jpg',\n  './sample/Penguins.jpg',\n  './sample/Tulips.jpg',\n]\n\nconst shaders = Shaders.create({\n  Operations: {\n    frag: GLSL`\nprecision lowp float;\nvarying vec2 uv;\n\nuniform sampler2D img;\n\nuniform bool bnw;\nuniform bool negative;\nuniform bool binary;\n\nuniform float binaryValue;\nuniform float brightness;\n\nfloat rgbtobw (vec3 imgin) {\n  return dot(imgin, vec3(1.0/3.0));\n}\n\nvec3 clipping (vec3 imgin) {\n  return max(min(imgin, 1.0), 0.0);\n}\n\nvec3 brightnessfunc (vec3 imgin) {\n  return clipping(imgin + brightness / 255.0);\n}\n\nvec3 binaryfunc (vec3 imgin) {\n  float gray = rgbtobw(imgin);\n  if(gray < binaryValue / 255.0){\n    return vec3(0.0);\n  } else {\n    return vec3(1.0);\n  }\n}\n\nvec3 negativefunc (vec3 imgin) {\n  return 1.0 - imgin;\n}\n\nvoid main(){\n  vec4 texture = texture2D(img, uv);\n  vec3 rgb = texture.rgb;\n\n  if(bnw){\n    rgb = vec3(rgbtobw(rgb));\n  }\n\n  rgb = brightnessfunc(rgb);\n\n  if(binary){\n    rgb = binaryfunc(rgb);\n  }\n\n  if(negative){\n    rgb = negativefunc(rgb);\n  }\n\n  gl_FragColor = vec4(rgb, texture.a);\n}\n`\n  }\n});\n\nfunction getWindowDimensions() {\n  return 490 / window.innerWidth;\n}\n\nfunction App() {\n  const [state, setState] = useState({\n    img: images[0],\n    bnw: false,\n    negative: false,\n    binary: false,\n    binaryValue: 120,\n    brightness: 0\n  });\n\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions());\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <Grid container justifyContent=\"center\" alignItems=\"center\" spacing={2}>\n      <Grid item>\n        <Surface\n          width={Math.min(4 * 100 / windowDimensions, 480)}\n          height={Math.min(3 * 100 / windowDimensions, 360)}>\n          <Node\n            shader={shaders.Operations}\n            uniforms={state}\n          />\n        </Surface>\n      </Grid>\n      <Grid item xs={10} sm={10} md={10} lg={6} xl={4}>\n        <FormGroup>\n          <FormControl variant=\"outlined\">\n            <InputLabel id=\"demo-simple-select-outlined-label\">Pilih gambar</InputLabel>\n            <Select\n              labelId=\"demo-simple-select-outlined-label\"\n              id=\"demo-simple-select-outlined\"\n              value={state.img}\n              onChange={e => setState({\n                ...state,\n                img: e.target.value\n              })}\n              label=\"Pilih gambar\"\n            >\n              {images.map((v, idx) => (<MenuItem key={idx} value={v}>\n                <img src={v} alt={v} height={25} /> {v}\n              </MenuItem>))}\n            </Select>\n          </FormControl>\n          <FormControlLabel\n            control={<Checkbox\n              checked={state.bnw}\n              onChange={e => setState({\n                ...state,\n                bnw: e.target.checked\n              })}\n              inputProps={{ 'aria-label': 'primary checkbox' }}\n            />}\n            label='Hitam putih'\n          />\n          <FormControlLabel\n            control={<Checkbox\n              checked={state.negative}\n              onChange={e => setState({\n                ...state,\n                negative: e.target.checked\n              })}\n              inputProps={{ 'aria-label': 'primary checkbox' }}\n            />}\n            label='Negatif'\n          />\n          <FormControlLabel\n            control={<Checkbox\n              checked={state.binary}\n              onChange={e => setState({\n                ...state,\n                binary: e.target.checked\n              })}\n              inputProps={{ 'aria-label': 'primary checkbox' }}\n            />}\n            label='Binerisasi'\n          />\n          <Slider\n            disabled={!state.binary}\n            color='secondary'\n            value={state.binaryValue}\n            valueLabelDisplay=\"auto\"\n            step={1}\n            min={0}\n            max={255}\n            onChange={(e, newValue) =>\n              (newValue >= 0 && newValue <= 255) && setState({\n                ...state,\n                binaryValue: newValue\n              })}\n          />\n          <FormControl>\n            <Typography id=\"brightness-slider\" gutterBottom>\n              Kecerahan\n            </Typography>\n            <Slider\n              aria-labelledby='brightness-slider'\n              value={state.brightness}\n              valueLabelDisplay=\"auto\"\n              step={1}\n              min={0}\n              max={255}\n              onChange={(e, newValue) =>\n                (newValue >= 0 && newValue <= 255) && setState({\n                  ...state,\n                  brightness: newValue\n                })}\n            />\n          </FormControl>\n        </FormGroup>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}